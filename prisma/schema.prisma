generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  username        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Project         Project?  @relation(fields: [projectId], references: [id])
  projectId       String?
  createdProjects Project[] @relation("ProjectCreator")
  Issue           Issue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WaitListEmails {
  id    String @id @default(uuid())
  email String @unique
}

model Project {
  id          String    @id @default(uuid())
  title       String    @unique
  description String?
  content     String?
  health      String?
  priority    String?
  lead        String?
  targetDate  DateTime?
  status      String?
  member      User[]
  issues      Issue[]
  creator     User      @relation("ProjectCreator", fields: [createdBy], references: [id])
  createdBy   String
}

model Issue {
  id           String   @id @default(uuid())
  title        String
  description  String?
  status       String?
  priority     String?
  update       String?
  User         User?    @relation(fields: [assignedUser], references: [id])
  assignedUser String?
  labels       String?
  Project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
